/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tanky.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-12-23")
public class Dept implements org.apache.thrift.TBase<Dept, Dept._Fields>, java.io.Serializable, Cloneable, Comparable<Dept> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dept");

  private static final org.apache.thrift.protocol.TField DNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEPTNO_FIELD_DESC = new org.apache.thrift.protocol.TField("deptno", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DB_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("db_source", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeptStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeptTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String dname; // optional
  public long deptno; // optional
  public @org.apache.thrift.annotation.Nullable String db_source; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DNAME((short)1, "dname"),
    DEPTNO((short)2, "deptno"),
    DB_SOURCE((short)3, "db_source");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DNAME
          return DNAME;
        case 2: // DEPTNO
          return DEPTNO;
        case 3: // DB_SOURCE
          return DB_SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPTNO_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DNAME,_Fields.DEPTNO,_Fields.DB_SOURCE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DNAME, new org.apache.thrift.meta_data.FieldMetaData("dname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.DEPTNO, new org.apache.thrift.meta_data.FieldMetaData("deptno", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.DB_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("db_source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dept.class, metaDataMap);
  }

  public Dept() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dept(Dept other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDname()) {
      this.dname = other.dname;
    }
    this.deptno = other.deptno;
    if (other.isSetDb_source()) {
      this.db_source = other.db_source;
    }
  }

  public Dept deepCopy() {
    return new Dept(this);
  }

  @Override
  public void clear() {
    this.dname = null;
    setDeptnoIsSet(false);
    this.deptno = 0;
    this.db_source = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getDname() {
    return this.dname;
  }

  public Dept setDname(@org.apache.thrift.annotation.Nullable String dname) {
    this.dname = dname;
    return this;
  }

  public void unsetDname() {
    this.dname = null;
  }

  /** Returns true if field dname is set (has been assigned a value) and false otherwise */
  public boolean isSetDname() {
    return this.dname != null;
  }

  public void setDnameIsSet(boolean value) {
    if (!value) {
      this.dname = null;
    }
  }

  public long getDeptno() {
    return this.deptno;
  }

  public Dept setDeptno(long deptno) {
    this.deptno = deptno;
    setDeptnoIsSet(true);
    return this;
  }

  public void unsetDeptno() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPTNO_ISSET_ID);
  }

  /** Returns true if field deptno is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptno() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPTNO_ISSET_ID);
  }

  public void setDeptnoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPTNO_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDb_source() {
    return this.db_source;
  }

  public Dept setDb_source(@org.apache.thrift.annotation.Nullable String db_source) {
    this.db_source = db_source;
    return this;
  }

  public void unsetDb_source() {
    this.db_source = null;
  }

  /** Returns true if field db_source is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_source() {
    return this.db_source != null;
  }

  public void setDb_sourceIsSet(boolean value) {
    if (!value) {
      this.db_source = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case DNAME:
      if (value == null) {
        unsetDname();
      } else {
        setDname((String)value);
      }
      break;

    case DEPTNO:
      if (value == null) {
        unsetDeptno();
      } else {
        setDeptno((Long)value);
      }
      break;

    case DB_SOURCE:
      if (value == null) {
        unsetDb_source();
      } else {
        setDb_source((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DNAME:
      return getDname();

    case DEPTNO:
      return getDeptno();

    case DB_SOURCE:
      return getDb_source();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DNAME:
      return isSetDname();
    case DEPTNO:
      return isSetDeptno();
    case DB_SOURCE:
      return isSetDb_source();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dept)
      return this.equals((Dept)that);
    return false;
  }

  public boolean equals(Dept that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dname = true && this.isSetDname();
    boolean that_present_dname = true && that.isSetDname();
    if (this_present_dname || that_present_dname) {
      if (!(this_present_dname && that_present_dname))
        return false;
      if (!this.dname.equals(that.dname))
        return false;
    }

    boolean this_present_deptno = true && this.isSetDeptno();
    boolean that_present_deptno = true && that.isSetDeptno();
    if (this_present_deptno || that_present_deptno) {
      if (!(this_present_deptno && that_present_deptno))
        return false;
      if (this.deptno != that.deptno)
        return false;
    }

    boolean this_present_db_source = true && this.isSetDb_source();
    boolean that_present_db_source = true && that.isSetDb_source();
    if (this_present_db_source || that_present_db_source) {
      if (!(this_present_db_source && that_present_db_source))
        return false;
      if (!this.db_source.equals(that.db_source))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDname()) ? 131071 : 524287);
    if (isSetDname())
      hashCode = hashCode * 8191 + dname.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeptno()) ? 131071 : 524287);
    if (isSetDeptno())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(deptno);

    hashCode = hashCode * 8191 + ((isSetDb_source()) ? 131071 : 524287);
    if (isSetDb_source())
      hashCode = hashCode * 8191 + db_source.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Dept other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDname()).compareTo(other.isSetDname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dname, other.dname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptno()).compareTo(other.isSetDeptno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptno, other.deptno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb_source()).compareTo(other.isSetDb_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_source, other.db_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dept(");
    boolean first = true;

    if (isSetDname()) {
      sb.append("dname:");
      if (this.dname == null) {
        sb.append("null");
      } else {
        sb.append(this.dname);
      }
      first = false;
    }
    if (isSetDeptno()) {
      if (!first) sb.append(", ");
      sb.append("deptno:");
      sb.append(this.deptno);
      first = false;
    }
    if (isSetDb_source()) {
      if (!first) sb.append(", ");
      sb.append("db_source:");
      if (this.db_source == null) {
        sb.append("null");
      } else {
        sb.append(this.db_source);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeptStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeptStandardScheme getScheme() {
      return new DeptStandardScheme();
    }
  }

  private static class DeptStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dept> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dept struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dname = iprot.readString();
              struct.setDnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPTNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deptno = iprot.readI64();
              struct.setDeptnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_source = iprot.readString();
              struct.setDb_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dept struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dname != null) {
        if (struct.isSetDname()) {
          oprot.writeFieldBegin(DNAME_FIELD_DESC);
          oprot.writeString(struct.dname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeptno()) {
        oprot.writeFieldBegin(DEPTNO_FIELD_DESC);
        oprot.writeI64(struct.deptno);
        oprot.writeFieldEnd();
      }
      if (struct.db_source != null) {
        if (struct.isSetDb_source()) {
          oprot.writeFieldBegin(DB_SOURCE_FIELD_DESC);
          oprot.writeString(struct.db_source);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeptTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeptTupleScheme getScheme() {
      return new DeptTupleScheme();
    }
  }

  private static class DeptTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dept> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dept struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDname()) {
        optionals.set(0);
      }
      if (struct.isSetDeptno()) {
        optionals.set(1);
      }
      if (struct.isSetDb_source()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDname()) {
        oprot.writeString(struct.dname);
      }
      if (struct.isSetDeptno()) {
        oprot.writeI64(struct.deptno);
      }
      if (struct.isSetDb_source()) {
        oprot.writeString(struct.db_source);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dept struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.dname = iprot.readString();
        struct.setDnameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deptno = iprot.readI64();
        struct.setDeptnoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.db_source = iprot.readString();
        struct.setDb_sourceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

